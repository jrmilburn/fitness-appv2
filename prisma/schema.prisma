generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User related db items

enum Role {
  USER
  COACH
}

model CoachingRequest {
  id        String        @id @default(cuid())
  clientId  String
  coachId   String
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  message   String?

  client User @relation("coachingRequestsAsClient", fields: [clientId], references: [id])
  coach  User @relation("coachingRequestsAsCoach", fields: [coachId], references: [id])

  @@unique([clientId, coachId])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model User {
  id               String       @id @default(cuid())
  email            String       @unique
  phone            String?
  emailVerified    DateTime?
  name             String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  image            String?
  bio              String?
  password         String?
  username         String?
  currentProgramId String?
  BodyWeight       BodyWeight[]
  programs         Program[]
  role             Role         @default(USER)

  accounts Account[]
  sessions Session[]

  following UserFollow[] @relation("following")
  followers UserFollow[] @relation("followers")

  coaches UserCoach[] @relation("userCoach")
  clients UserCoach[] @relation("userClient")

  coachingRequestsAsClient CoachingRequest[] @relation("coachingRequestsAsClient")
  coachingRequestsAsCoach  CoachingRequest[] @relation("coachingRequestsAsCoach")

  excercises Excercise[] @relation(name: "UserExcercises")
}

model BodyWeight {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  weight    Float
  userId    String
  createdAt DateTime @default(now())
}

model UserFollow {
  fromUserId String
  toUserId   String
  followedAt DateTime @default(now())

  fromUser User @relation("following", fields: [fromUserId], references: [id])
  toUser   User @relation("followers", fields: [toUserId], references: [id])

  @@id([fromUserId, toUserId])
}

model UserCoach {
  clientUserId String
  coachUserId  String

  client User? @relation("userClient", fields: [clientUserId], references: [id])
  coach  User? @relation("userCoach", fields: [coachUserId], references: [id])

  @@id([clientUserId, coachUserId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//Program related db items

model Program {
  id            String    @id @default(cuid())
  name          String
  length        Int
  days          Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  weeks         Week[] // No `onDelete` here; it's specified in `Week`
  currentWeekId String?
  completed     Boolean   @default(false)
}

model Week {
  id               String    @id @default(cuid())
  weekNo           Int
  program          Program   @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId        String
  updatedAt        DateTime? @updatedAt
  workouts         Workout[] // No `onDelete` here; it's specified in `Workout`
  currentWorkoutId String?
  repsInReserve    Int       @default(3)
  completed        Boolean   @default(false)

  @@unique([programId, weekNo])
}

model Workout {
  id                 String      @id @default(cuid())
  workoutNo          Int
  week               Week        @relation(fields: [weekId], references: [id], onDelete: Cascade)
  weekId             String
  name               String
  updatedAt          DateTime?   @updatedAt
  excercises         Excercise[] // No `onDelete` here; it's specified in `Excercise`
  currentExcerciseId String?
  completed          Boolean     @default(false)

  @@unique([weekId, name])
}

model Excercise {
  id            String      @id @default(cuid())
  name          String
  workout       Workout?    @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId     String?
  updatedAt     DateTime    @updatedAt
  createdAt     DateTime    @default(now())
  sets          Set[]       
  currentSetId  String?
  muscleGroupId String
  muscleGroup   MuscleGroup @relation(fields: [muscleGroupId], references: [id])
  completed     Boolean     @default(false)
  details       String?
  custom        Boolean     @default(false)
  createdById String?
  createdBy   User? @relation(name: "UserExcercises", fields: [createdById], references: [id])

  @@unique([workoutId, name])
}


model Set {
  id                String    @id @default(cuid())
  setNo             Int
  reps              Int?
  weight            Float?
  recommendedReps   Int?
  recommendedWeight Float?
  excercise         Excercise @relation(fields: [excerciseId], references: [id], onDelete: Cascade)
  excerciseId       String
  updatedAt         DateTime? @updatedAt
  createdAt         DateTime  @default(now())
  completed         Boolean   @default(false)
}

model MuscleGroup {
  id         String      @id @default(cuid())
  name       String      @unique
  excercises Excercise[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
}
